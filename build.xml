<project name="web_3" default="build">
    <property file="build.properties"/>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="${main.dir}" includes="*.java"/>
    </path>

    <path id="classpath.test">
        <pathelement location="${junit}"/>
        <pathelement location="${hamcrest}"/>
        <pathelement location="${classes.dir}"/>
    </path>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${contrib}"/>
        </classpath>
    </taskdef>
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${contrib}"/>
        </classpath>
    </taskdef>

    <target name="compile" depends="clean">
        <echo message="***** COMPILE STARTED *****"/>
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath" includeantruntime="false"/>
        <echo message="***** COMPILE COMPLETED *****"/>
    </target>

    <target name="build" depends="compile">
        <echo message="***** BUILD STARTED *****"/>
        <copy todir="${build.dir}">
            <fileset dir="${web.dir}"/>
        </copy>
        <copy todir="${build.dir.lib}">
            <fileset dir="${lib.dir}"/>
        </copy>
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}"/>
        </copy>

        <jar destfile="${build.dir}/${ant.project.name}.jar">
            <fileset dir="${classes.dir}"/>
            <manifest>
                <attribute name="Created-By" value="Dasha"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="NoClass"/>
            </manifest>
        </jar>

        <echo message="***** BUILD COMPLETED *****"/>
    </target>

    <target name="clean">
        <echo message="***** CLEAN STARTED *****"/>
        <delete dir="${build.dir}"/>
        <delete dir="${junit.report.dir}"/>
        <echo message="***** CLEAN COMPLETED *****"/>
    </target>

    <target name="test" depends="build">
        <echo message="***** TEST STARTED *****"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${junit.report.dir}"/>
        <javac destdir="${test.classes.dir}" srcdir="${test.dir}" includeantruntime="false" encoding="utf-8">
            <classpath refid="classpath.test"/>
        </javac>
        <junit printsummary="on" haltonfailure="true" haltonerror="true">
            <classpath>
                <path refid="classpath.test"/>
                <pathelement location="${test.classes.dir}"/>
            </classpath>
            <batchtest fork="yes" todir="${junit.report.dir}">
                <formatter type="xml"/>
                <fileset dir="${test.dir}" includes="*Test.java"/>
            </batchtest>
        </junit>
        <echo message="***** TEST COMPLETED *****"/>
    </target>

    <target name="xml">
        <echo message="***** XML STARTED *****"/>
        <xmlvalidate lenient="true">
            <fileset dir="./" includes="**/*.xml">
                <exclude name=".idea/**"/>
            </fileset>
        </xmlvalidate>
        <echo message="***** XML COMPLETED *****"/>
    </target>

    <target name="music" depends="build">
        <echo message="***** PLAYING MUSIC *****"/>
        <exec executable="cmd">
            <arg value="/c"/>
            <arg value="start"/>
            <arg value="${music.file}"/>
        </exec>
    </target>

    <target name="native2ascii">
        <echo message="***** NATIVE2ASCII STARTED *****"/>
        <delete dir="${native2ascii.resources}"/>
        <mkdir dir="${native2ascii.resources}"/>
        <native2ascii src="${resources.dir}"
                      dest="${native2ascii.resources}"
                      encoding="UTF-8"
                      includes="**/*.properties"/>
        <echo message="***** NATIVE2ASCII COMPLETED *****"/>
    </target>


    <target name="doc" depends="build">
        <echo message="***** DOC STARTED *****"/>

        <fileset dir="${build.dir}" id="files.to.process">
                <include name="**/*"/>
        </fileset>

        <for param="file">
            <path>
                <fileset refid="files.to.process"/>
            </path>
            <sequential>
                <checksum algorithm="md5" property="@{file}.md5">
                    <file name="@{file}"/>
                </checksum>
                <checksum algorithm="sha1" property="@{file}.sha1">
                    <file name="@{file}"/>
                </checksum>
                <pathconvert property="@{file}.relative">
                    <path location="@{file}"/>
                    <globmapper from="${basedir}/*" to="*" />
                </pathconvert>
                <manifest file="${manifest.file}" mode="update">
                    <section name="${@{file}.relative}">
                        <attribute name="MD5-Digest" value="${@{file}.md5}"/>
                        <attribute name="SHA1-Digest" value="${@{file}.sha1}"/>
                    </section>
                </manifest>
            </sequential>
        </for>

        <mkdir dir="${javadoc.dir}/javadoc"/>
        <javadoc destdir="${javadoc.dir}/javadoc">
            <classpath refid="classpath"/>
            <fileset dir="${src.dir}" includes="**/*.java"/>
        </javadoc>
        <echo message="***** DOC COMPLETED *****"/>
    </target>

    <target name="team">
        <exec executable="git" failonerror="true">
            <arg value="stash"/>
        </exec>
        <exec executable="git" outputproperty="current.commit" failonerror="true">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>
        <exec executable="git" outputproperty="current.branch" failonerror="true">
            <arg value="rev-parse"/>
            <arg value="--abbrev-ref"/>
            <arg value="HEAD"/>
        </exec>
        <property name="revision1" value="${current.commit}~1"/>
        <property name="revision2" value="${current.commit}~2"/>

        <exec executable="git" failonerror="true">
            <arg value="checkout"/>
            <arg value="${revision1}"/>
        </exec>
        <antcall target="build">
            <param name="war.file" value="${build.dir}/${ant.project.name}_${revision1}.war"/>
        </antcall>

        <exec executable="git" failonerror="true">
            <arg value="checkout"/>
            <arg value="${revision2}"/>
        </exec>
        <antcall target="build">
            <param name="war.file" value="${build.dir}/${ant.project.name}_${revision2}.war"/>
        </antcall>

        <zip destfile="${build.dir}/prev-revisions.zip">
            <fileset dir="${build.dir}">
                <include name="${ant.project.name}_${revision1}.war"/>
                <include name="${ant.project.name}_${revision2}.war"/>
            </fileset>
        </zip>

        <exec executable="git" failonerror="true">
            <arg value="checkout"/>
            <arg value="${current.branch}"/>
        </exec>
        <exec executable="git" failonerror="false">
            <arg value="stash"/>
            <arg value="pop"/>
        </exec>
    </target>

       <target name="diff">
        <echo message="***** DIFF TARGET STARTED *****"/>

        <exec executable="git" outputproperty="diff.output">
            <arg value="diff"/>
            <arg value="--name-only"/>
        </exec>

        <loadfile property="exclude.patterns" srcFile="exclude_classes.txt"/>

        <condition property="should.commit" value="false" else="true">
            <matches pattern="${exclude.patterns}" string="${diff.output}" casesensitive="false"/>
        </condition>

        <if>
            <equals arg1="${should.commit}" arg2="true"/>
            <then>
                <echo message="Changes affect files outside excluded classes. Committing changes..."/>
                <exec executable="git">
                    <arg value="commit"/>
                    <arg value="-am"/>
                    <arg value="No changes in classes"/>
                </exec>
            </then>
            <else>
                <echo message="changes in classes"/>
            </else>
        </if>

        <echo message="***** DIFF TARGET COMPLETED *****"/>
    </target>

    <target name="report" depends="test">
        <echo message="***** REPORT STARTED *****"/>

        <condition property="tests.successful">
            <not>
                <isset property="tests.failed" />
            </not>
        </condition>

        <if>
            <isset property="tests.successful" />
            <then>
                <junitreport todir="${junit.report.dir}">
                    <fileset dir="${junit.report.dir}" includes="TEST-*.xml" />
                    <report todir="${junit.report.dir}" />
                </junitreport>
                <exec executable="git">
                    <arg value="add" />
                    <arg value="${junit.report.dir}/TESTS-*.xml" />
                </exec>
                <exec executable="git">
                    <arg value="update" />
                    <arg value="${junit.report.dir}/TESTS-*.xml"/>
                </exec>
                <exec executable="git">
                    <arg value="commit" />
                    <arg value="${junit.report.dir}/TESTS-*.xml"/>
                    <arg value="-m" />
                    <arg value="report after tests" />
                </exec>
            </then>
            <else>
                <echo message="Failed tests" />
            </else>
        </if>
        <echo message="***** REPORT COMPLETED *****"/>
    </target>



</project>